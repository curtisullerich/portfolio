on init    set_script_title("Improv")    make_perfview()    declare ui_button $Improv    $Improv := 0    declare $chord := 0 {0:=major, 1:=minor}        declare $numnotes := 0    declare %prev[4]    declare $i := 0    declare $count := 0    declare $octaveOffset := 0    declare $prevNote := 0{The following are arrays out of which random consonantnotes are selected based on which notes are currentlyheld on the keyboard}    {1}    declare %soloNotes[7] := (0,2,4,5,7,9,11)    {3}    declare %majorNotes[5] := (0,2,4,7,9)    declare %minorNotes[5] := (0,2,3,7,9)    declare %diminishedNotes[5] := (0,2,3,6,10)    declare %augmentedNotes[5] := (0,2,5,8,11)    {4}    declare %major7Notes[5] := (0,4,7,9,11)    declare %dominant7Notes[5] := (0,4,7,8,10)    declare %minorMajor7Notes[5] := (0,3,7,9,11)    declare %minor7Notes[5] := (0,3,7,8,10)    declare %augmented7Notes[5] := (0,4,8,9,11)    declare %halfDiminished7Notes[5] := (0,3,6,8,10)    declare $odd := 0    declare $break := 0    declare $nextNote := -1    set_listener ($NI_SIGNAL_TIMER_MS,1000000/6)    declare %key_down_oct[12] := (0,0,0,0,0,0,0,0,0,0,0,0)    declare ui_knob $Duration(0,5,1)        $Duration := 4        set_knob_label($Duration, "16th")        declare $dur    $dur := $DURATION_SIXTEENTH    declare ui_knob $Subdivision(1,24,1)        $Subdivision := 2        set_listener($NI_SIGNAL_TIMER_BEAT,2*3/2)end onon ui_control($Duration)    select($Duration)        case 0            $dur := $DURATION_QUARTER            set_knob_label($Duration, "Quarter")        case 1            $dur := $DURATION_QUARTER_TRIPLET            set_knob_label($Duration, "4th triplet")        case 2            $dur := $DURATION_EIGHTH            set_knob_label($Duration, "Eighth")        case 3            $dur := $DURATION_EIGHTH_TRIPLET            set_knob_label($Duration, "8th triplet")        case 4            $dur := $DURATION_SIXTEENTH            set_knob_label($Duration, "16th")        case 5            $dur := $DURATION_SIXTEENTH_TRIPLET            set_knob_label($Duration, "16th triplet")    end selectend onon ui_control($Subdivision)    change_listener_par($NI_SIGNAL_TIMER_BEAT,$Subdivision*3/2)end on

on controller
    if (%CC[111] > 0)
        $Improv := 1
    else 
        $Improv := 0
    end if
end on

on ui_control($Improv)
    set_controller(111, $Improv)
end on
{The note and release callbacks serve only to update the arrayof which keys are pressed. Thy KEY_DOWN_OCT built-in arraycannot be accessed from an on-listener callback, soI have to do this as a workaround.}on note    %key_down_oct[0] := %KEY_DOWN_OCT[0]    %key_down_oct[1] := %KEY_DOWN_OCT[1]    %key_down_oct[2] := %KEY_DOWN_OCT[2]    %key_down_oct[3] := %KEY_DOWN_OCT[3]    %key_down_oct[4] := %KEY_DOWN_OCT[4]    %key_down_oct[5] := %KEY_DOWN_OCT[5]    %key_down_oct[6] := %KEY_DOWN_OCT[6]    %key_down_oct[7] := %KEY_DOWN_OCT[7]    %key_down_oct[8] := %KEY_DOWN_OCT[8]    %key_down_oct[9] := %KEY_DOWN_OCT[9]    %key_down_oct[10] := %KEY_DOWN_OCT[10]    %key_down_oct[11] := %KEY_DOWN_OCT[11]end onon release    %key_down_oct[0] := %KEY_DOWN_OCT[0]    %key_down_oct[1] := %KEY_DOWN_OCT[1]    %key_down_oct[2] := %KEY_DOWN_OCT[2]    %key_down_oct[3] := %KEY_DOWN_OCT[3]    %key_down_oct[4] := %KEY_DOWN_OCT[4]    %key_down_oct[5] := %KEY_DOWN_OCT[5]    %key_down_oct[6] := %KEY_DOWN_OCT[6]    %key_down_oct[7] := %KEY_DOWN_OCT[7]    %key_down_oct[8] := %KEY_DOWN_OCT[8]    %key_down_oct[9] := %KEY_DOWN_OCT[9]    %key_down_oct[10] := %KEY_DOWN_OCT[10]    %key_down_oct[11] := %KEY_DOWN_OCT[11]end onon listener    $numnotes := %key_down_oct[0] + %key_down_oct[1] +%key_down_oct[2] +%key_down_oct[3] +%key_down_oct[4] +%key_down_oct[5] +%key_down_oct[6] +%key_down_oct[7] +%key_down_oct[8] +%key_down_oct[9] +%key_down_oct[10] +%key_down_oct[11]    if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT and $Improv = 1)                if ($numnotes = 0)             {do nothing}            $nextNote := -1        end if                if ($numnotes = 1)             {assume that this is the root and have fun with it}            $i := 0            while ($i < 12)                if (key_down_oct[$i] = 1)                    $nextNote := %soloNotes[random(0,6)] + $i                end if                inc($i)            end while        end if                if ($numnotes = 2)             {hmmmmmmmmmm}            $nextNote := -1        end if                if ($numnotes = 3)            $i := 0            while ($i < 12)                {Major}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(4+$i) mod 12] = 1 and %key_down_oct[(7+$i) mod 12] = 1)                    $nextNote := %majorNotes[random(0,4)] + $i                end if                {Minor}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(3+$i) mod 12] = 1 and %key_down_oct[(7+$i) mod 12] = 1)                    $nextNote := %minorNotes[random(0,4)] + $i                end if                {Diminished}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(3+$i) mod 12] = 1 and %key_down_oct[(6+$i) mod 12] = 1)                    $nextNote := %diminishedNotes[random(0,4)] + $i                end if                {Augmented}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(4+$i) mod 12] = 1 and %key_down_oct[(8+$i) mod 12] = 1)                    $nextNote := %augmentedNotes[random(0,4)] + $i                end if                inc($i)            end while            {use overtones and mod for harmonicity}        end if                if ($numnotes = 4)            $i := 0            while ($i < 12)                                {Major 7: 1 3 5 7 = 0 4 7 11}                if (key_down_oct[(0+$i) mod 12] = 1 and key_down_oct[(4+$i) mod 12] = 1 and key_down_oct[(7+$i) mod 12] = 1 and key_down_oct[(11+$i) mod 12] = 1)                    $nextNote := %major7Notes[random(0,4)] + $i                end if                {Dominant 7: 1 3 5 b7 = 0 4 7 10}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(4+$i) mod 12] = 1 and %key_down_oct[(7+$i) mod 12] = 1 and key_down_oct[(10+$i) mod 12] = 1)                    $nextNote := %dominant7Notes[random(0,4)] + $i                end if                {Minor major 7: 1 b3 5 7 = 0 3 7 11}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(3+$i) mod 12] = 1 and %key_down_oct[(7+$i) mod 12] = 1 and key_down_oct[(11+$i) mod 12] = 1)                    $nextNote := %minorMajor7Notes[random(0,4)] + $i                end if                {Minor 7: 1 b3 5 b7 = 0 3 7 10}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(3+$i) mod 12] = 1 and %key_down_oct[(7+$i) mod 12] = 1 and key_down_oct[(10+$i) mod 12] = 1)                    $nextNote := %minor7Notes[random(0,4)] + $i                end if                {Augmented 7: 1 3 #5 7 = 0 4 8 11}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(4+$i) mod 12] = 1 and %key_down_oct[(8+$i) mod 12] = 1 and key_down_oct[(11+$i) mod 12] = 1)                    $nextNote := %augmented7Notes[random(0,4)] + $i                end if                {Half diminished 7: 1 b3 b5 b7 = 0 3 6 10}                if (%key_down_oct[(0+$i) mod 12] = 1 and %key_down_oct[(3+$i) mod 12] = 1 and key_down_oct[(6+$i) mod 12] = 1 and key_down_oct[(10+$i) mod 12] = 1 )                    $nextNote := %halfDiminished7Notes[random(0,4)] + $i                end if                inc($i)            end while        end if                if ($numnotes > 4)             {just play using the held notes}            $i := random(0,11)            while ($i < 12 and $break = 0)                if (%key_down_oct[$i] = 1)                    $nextNote := $i                    $break := 1                end if                inc($i)            end while            $break := 0        end if                if ($nextNote > -1 and ($odd = 0 or $odd = 2) and abs($nextNote-$prevNote) <9)            play_note($nextNote + 48 + $octaveOffset*12, 90, 0, $dur)            $count := ($count + 1) mod 20            if ($count = 19)                $octaveOffset := $octaveOffset + random(1,3) - 2            end if            if ($octaveOffset > 1)                 $octaveOffset := 1            end if            if ($octaveOffset < -1)                $octaveOffset := -1            end if            $prevNote := $nextNote        end if        $odd := ($odd + `1) mod 3    end ifend on